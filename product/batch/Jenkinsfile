pipeline {
    agent any

    tools {
        gradle 'gradle-8.3'
        jdk 'jdk-17'
    }

    environment {
        // AWS ECR Configuration 
        AWS_DEFAULT_REGION = 'ap-northeast-2'
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/bottle-story-batch-prod"
        
        // GitHub Configuration
        RELEASE_GITHUB_URL = 'https://github.com/Bottle-Story/bottle-story-devops.git'
        APP_GITHUB_URL = 'https://github.com/Bottle-Story/bottle-story-batch.git'
    }

    stages {
        stage('소스파일 체크아웃') {
            steps {
                git branch: 'product', url: "${APP_GITHUB_URL}"
            }
        }

        stage('소스 빌드') {
            steps {
                sh "chmod +x ./gradlew"
                sh "gradle clean build -x test"
            }
        }

        stage('릴리즈파일 체크아웃') {
            steps {
                dir('release') {
                    checkout([$class: 'GitSCM',
                              branches: [[name: 'main']],
                              userRemoteConfigs: [[url: "${RELEASE_GITHUB_URL}"]]
                    ])
                }
            }
        }
        
        stage('파일 위치 확인') {
            steps {
                sh 'find . -name Dockerfile-prod'
                sh 'find . -name "*.jar"'
                sh 'ls -lR | grep ".jar"'
            }
        }
        
        stage('컨테이너 빌드') {
            steps {
                // release/product/batch 폴더로 jar 복사
                sh 'cp ./build/libs/bottle-batch-prod-0.0.1-SNAPSHOT.jar release/product/batch/'

                // ECR 로그인
                sh '''
                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                    docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                '''

                sh "docker build -t ${ECR_REPOSITORY}:latest -f release/product/batch/Dockerfile-prod release/product/batch"
            }
        }

        stage('컨테이너 업로드') {
            steps {
                sh "docker push ${ECR_REPOSITORY}:latest"
            }
        }

        stage('쿠버네티스 배포') {
            steps {
                withCredentials([file(credentialsId: 'k8s_prod_config', variable: 'KUBECONFIG')]) {
                    sh "helm upgrade --install backend-bottle-batch-prod release/product/batch/helm \
                          --values release/product/batch/helm/values-prod.yaml \
                          --namespace bottle-story-prod \
                          --create-namespace"
                }
            }
        }
    }
}
